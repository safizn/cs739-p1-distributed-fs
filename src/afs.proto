syntax = "proto3"; // we use proto version 3
package afs;   // similar to namespace, avoid conflicts



/**
  * AFS (AFS basic protocol version 1) gRPC services:
*/
service AFS {
  // TestAuth        Test whether a file has changed (used to validate cached entries). 
  //                          check whether a local file (or its stat information) 
  // approach 1: get modified time 
  // approach 2: logical clocks ? or hashing content ? 
  // TODO: not required could use GetAttr instead
  rpc checkCacheValidity(Path) returns (Response) {};
  
  // GetFileStat/GetAttr/Stat     Get the stat info for a file (Gets status info about files absent from cache)
  rpc GetAttr(Path) returns (StatInfo) {};

  // SetFileStat     Set the stat info for a file
  // TODO:
  rpc SetFileStat(StatInfo) returns (Response) {}; 

  // Fetch/GetFileContents/Read/Open functionality         Fetch the contents of file
  rpc Read(ReadRequest) returns (stream ReadReply) {}; // TODO: remove redundant
  rpc Open(OpenRequest) returns (OpenResponse) {};

  // Store/Update/Write file           Store this file on the server (called on close())
  rpc Write(stream WriteRequest) returns (WriteReply) {};
  
  // remove file
  rpc Unlink(Path) returns (Response) {};
  
  // create directory
  rpc MkDir(MkDirRequest) returns (MkDirResponse) {};
  // remove directory
  rpc RmDir(Path) returns (Response) {}; 

  // ListDir         List the contents of a directory
  rpc ReadDir(Path) returns (stream ReadDirResponse) {};   

  // rename implementation required ? 
  // TODO: if needed

  // EXAMPLE API: keep this for debudding
  rpc SayHello(HelloRequest) returns (HelloReply) {};
  rpc SayHelloStreamReply(HelloRequest) returns (stream HelloReply) {};

}


message ReadDirResponse {
    int32 err = 2;
    bytes buf = 1;
}

message Path {
    string path = 1;
}

message Response {
    int32 status = 1;
}

message MkDirRequest {
    string path = 1;
    uint32 modet = 2;
}

message MkDirResponse {
    int32 status = 1;
    int32 erronum = 2;
}

message Datablock {
    bytes content = 1;
}

message OpenRequest {
    string path = 1;
    uint32  mode = 2;
}

message OpenResponse {
    int32 err = 1;
    int64 timestamp = 2;
}

message ReadRequest {
    string path = 1;
    // int32  size = 2;
    // int32  offset = 3;
}

message ReadReply {
    int32 numBytes = 1;
    bytes buf = 2;
    int32 err = 3;
    int64 timestamp = 4;
}

message WriteRequest {
    string path = 1;
    bytes  buf = 2;
    int32  size = 3;
    int32  offset = 4;
}

message WriteReply {
    int32 numBytes = 1;
    int32 err = 2;
    int64 timestamp = 3;
}



/** https://linux.die.net/man/2/stat
  *    struct stat {
  *        dev_t     st_dev;     /* ID of device containing file */    -> unsigned long int
  *        ino_t     st_ino;     /* inode number */                    -> unsigned long int
  *        mode_t    st_mode;    /* protection */                      -> unsigned int
  *        nlink_t   st_nlink;   /* number of hard links */            -> unsigned long int
  *        uid_t     st_uid;     /* user ID of owner */                -> unsigned int
  *        gid_t     st_gid;     /* group ID of owner */               -> unsigned int
  *        dev_t     st_rdev;    /* device ID (if special file) */     -> unsigned long int
  *        off_t     st_size;    /* total size, in bytes */            -> long int
  *        blksize_t st_blksize; /* blocksize for file system I/O */   -> long int
  *        blkcnt_t  st_blocks;  /* number of 512B blocks allocated */ -> long int
  *        time_t    st_atime;   /* time of last access */             -> long int
  *        time_t    st_mtime;   /* time of last modification */       -> long int
  *        time_t    st_ctime;   /* time of last status change */      -> long int
  *    };
*/
message StatInfo {
    int32 status = 1;
    int32 errornum = 2;
    uint64 stdev = 3;     
    uint64 stino = 4;    
    uint32 stmode = 5;
    uint64 stnlink = 6;
    uint32 stuid = 7; 
    uint32 stgid = 8;
    uint64 strdev = 9;
    int64 stsize = 10;
    int64 stblksize = 11;
    int64 stblocks = 12; 
    int64 statime = 13;  
    int64 stmtime = 14;  
    int64 stctime = 15;  
}



/** Test examples ******************************************************************************************************** EXAMPLE API *******************************f**/
message HelloRequest { string name = 1; }
message HelloReply { string message = 1; }



