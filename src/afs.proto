syntax = "proto3"; // we use proto version 3
package afs;   // similar to namespace, avoid conflicts

service CustomAFS {
    rpc Mkdir(Path) returns (Response) {};
    rpc Unlink(Path) returns (Response) {};
    rpc Rmdir(Path) returns (Response) {};
    //  rpc GetAttr(Path) returns (StatInfo) {};
    rpc Read(ReadFileStreamReq) returns (stream ReadFileStreamReply) {};
    rpc Write(stream Datablock) returns (Response) {};
    // rpc Create(Path) returns (Response) {};

    // EXAMPLE API: keep this for debudding
    // Sends a greeting
    rpc SayHello(HelloRequest) returns (HelloReply) {}
    rpc SayHelloStreamReply(HelloRequest) returns (stream HelloReply) {}
}

message Path {
    string path = 1;
}

message Response {
    int32 status = 1;
}

message Datablock {
    bytes content = 1;
}

message ReadFileStreamReq {
    string path = 1;
    int32  size = 2;
    int32  offset = 3;
}

message ReadFileStreamReply {
    int32 numBytes = 1;
    bytes buf  = 2;
    int32 err = 3;
    int64 timestamp=4;
}

// https://linux.die.net/man/2/stat
// struct stat {
//     dev_t     st_dev;     /* ID of device containing file */
//     ino_t     st_ino;     /* inode number */
//     mode_t    st_mode;    /* protection */
//     nlink_t   st_nlink;   /* number of hard links */
//     uid_t     st_uid;     /* user ID of owner */
//     gid_t     st_gid;     /* group ID of owner */
//     dev_t     st_rdev;    /* device ID (if special file) */
//     off_t     st_size;    /* total size, in bytes */
//     blksize_t st_blksize; /* blocksize for file system I/O */
//     blkcnt_t  st_blocks;  /* number of 512B blocks allocated */
//     time_t    st_atime;   /* time of last access */
//     time_t    st_mtime;   /* time of last modification */
//     time_t    st_ctime;   /* time of last status change */
// };
// msg StatInfo {
//     
//     st_dev = 1;     
//     st_ino = 2;    
//     st_mode = 3;
//     st_nlink = 4;
//     st_uid = 5; 
//     st_gid = 6;
//     st_rdev = 7;
//     st_size = 8;
//     st_blksize = 9;
//     st_blocks = 10; 
//     st_atime = 11;  
//     st_mtime = 12;  
//     st_ctime = 13;  
// }



/** EXAMPLE API **/
// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}
